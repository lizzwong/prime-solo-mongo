# prime-solo-mongo

1) Create a collection named orders.
> db.createCollection('orders')

2)Insert at least 3 documents that represent an order. IMPORTANT: See section below for fields. Order dates should be: 2017-02-03, 2017-04-04, 2017-01-02

> orders.insert({orderDate: "2017-02-03", orderTotal:"$1000.00", lineItems:[{ unitPrice:100},{ quantity:10},{ productName:'Bananas'}]});
WriteResult({ "nInserted" : 1 })
> orders.insert({orderDate: "2017-04-04", orderTotal:"$5000.00", lineItems:[{ unitPrice:500},{ quantity:10},{ productName:'Unicorns'}]});
WriteResult({ "nInserted" : 1 })
> orders.insert({orderDate: "2017-01-02", orderTotal:"$50000.00", lineItems:[{ unitPrice:500},{ quantity:100},{ productName:'Pandas'}]});
WriteResult({ "nInserted" : 1 })
> 

3)Find all orders and make them look pretty.
 orders.find().pretty()
{
	"_id" : ObjectId("5a971f1e45b5d9ba5fe059be"),
	"orderDate" : ISODate("2017-02-03T22:23:20.201Z"),
	"orderTotal" : "$63.00",
	"lineItems" : [
		{
			"unitPrice" : 100,
			"quantity" : 10,
			"productName" : "Bananas"
		}
	]
}
{
	"_id" : ObjectId("5a971f6b45b5d9ba5fe059bf"),
	"orderDate" : ISODate("2017-04-04T00:24:20.201Z"),
	"orderTotal" : "$5000.00",
	"lineItems" : [
		{
			"unitPrice" : 500,
			"quantity" : 10,
			"productName" : "Unicorns"
		},
		{
			"category" : "Squirrels"
		}
	]
}
{
	"_id" : ObjectId("5a971fa545b5d9ba5fe059c0"),
	"orderDate" : ISODate("2017-01-02T21:22:20.201Z"),
	"orderTotal" : "$50000.00",
	"lineItems" : [
		{
			"unitPrice" : 500,
			"quantity" : 100,
			"productName" : "Pandas"
		}
	]
}
> 


4)Find all orders with an orderDate that is after 1/31/2017.

> orders.find({orderDate: {$gt: new Date('2017-31-1')}})
{ "_id" : ObjectId("5a971f1e45b5d9ba5fe059be"), "orderDate" : ISODate("2017-02-03T22:23:20.201Z"), "orderTotal" : "$63.00", "lineItems" : [ { "unitPrice" : 100, "quantity" : 10, "productName" : "Bananas" } ] }
{ "_id" : ObjectId("5a971f6b45b5d9ba5fe059bf"), "orderDate" : ISODate("2017-04-04T00:24:20.201Z"), "orderTotal" : "$5000.00", "lineItems" : [ { "unitPrice" : 500, "quantity" : 10, "productName" : "Unicorns" }, { "category" : "Squirrels" } ] }
{ "_id" : ObjectId("5a971fa545b5d9ba5fe059c0"), "orderDate" : ISODate("2017-01-02T21:22:20.201Z"), "orderTotal" : "$50000.00", "lineItems" : [ { "unitPrice" : 500, "quantity" : 100, "productName" : "Pandas" } ] }
> 


5)Change the orderTotal from 2/3/2017 to 63 dollars (you do NOT have to ensure the lineItems' unitPrice * quantity add up to the orderTotal)

>  orders.update({"orderDate" : ISODate("2017-02-03T22:23:20.201Z")}, {$set: {"orderTotal":"$63.00"}})

6)Add another lineItem to the order from 4/4/2017

> orders.update({"orderDate" : ISODate("2017-04-04T00:24:20.201Z")}, {$push:{ "lineItems" : {"category": "Squirrels"}}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })


7)Change the first lineItem in the order from 1/2/2017 to be for 2 'transistor radio's

 orders.update({"orderDate":ISODate("2017-01-02T21:22:20.201Z")}, {$set : {"lineItems": [{"quantity": 2, "productName":"Transistor Radio"}]}})


8)Find orders with lineItems that have a quantity that is less than 10, but greater than 2. You will have to research $elemMatch

> orders.find({"quantity": {$elemMatch: { $gt:2, $lt: 10 } } })
